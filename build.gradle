buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'meet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

repositories {
    mavenCentral()
}

ext {
    springCloudVersion = 'Finchley.SR1'
    junitPlatformVersion = '1.2.0'
    junitJupiterVersion = '5.2.0'
    mockitoVersion = '2.21.0'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
    implementation('org.springframework.cloud:spring-cloud-stream-reactive')
    implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka')
    implementation('org.springframework.kafka:spring-kafka')
    compileOnly('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.cloud:spring-cloud-stream-test-support')

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCompile "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
